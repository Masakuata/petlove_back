openapi: 3.0.0
info:
  title: Sharedz service
  version: 0.0.1
servers:
  - description: Desarrollo HTTPS
    url: https://neutral-kindly-wildcat.ngrok-free.app
  - description: Desarrollo HTTP
    url: http://clayrite.ddns.net:110
components:
  schemas:
    token:
      type: string
      title: Token identificador de la sesion de usuario
      example: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJkY29ycmVvMkBjb3JyZW8uY29tIiwiZXhwIjoxNzA0OTYwNjUzLCJ1c2VybmFtZ
    email:
      type: string
      title: Email del miembro
      minLength: 5
      maxLength: 320
      example: correo@dominio.com
    username:
      type: string
      title: Username del miembro
      example: juanito
    password:
      type: string
      title: Contrasena del miembro
      example: password981
    newMember:
      type: object
      title: Miembro para registrar
      description: Informacion del miembro a registrar
      required: [ username, email, password ]
      properties:
        username:
          allOf:
            - $ref: '#/components/schemas/username'
        email:
          allOf:
            - $ref: '#/components/schemas/email'
        password:
          allOf:
            - $ref: '#/components/schemas/password'
    publicMember:
      type: object
      title: Informacion publica de miembro
      description: Informacion publica de un miembro registrado
      required: [ username, email ]
      properties:
        username:
          allOf:
            - $ref: '#/components/schemas/username'
        email:
          allOf:
            - $ref: '#/components/schemas/email'
    loginCredentials:
      type: object
      title: Credenciales de inicio de sesion
      description: Correo electronico y contrasena de un miembro registrado
      required: [ email, password ]
      properties:
        email:
          allOf:
            - $ref: '#/components/schemas/email'
        password:
          allOf:
            - $ref: '#/components/schemas/password'
    grupo:
      type: object
      title: Grupo de usuarios
      description: Grupo de usuarios para compartir deudas rapidamente
      required: [ nombre ]
      properties:
        nombre:
          type: string
          example: bandidos
        miembros:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/publicMember'
    array_grupo:
      type: array
      title: Lista de grupos de usuarios
      description: Lista de grupos de usuarios
      items:
        type: object
        allOf:
          - $ref: '#/components/schemas/grupo'
  parameters:
    header_token:
      name: Token
      description: Token identificador de la sesion de usuario
      in: header
      schema:
        $ref: '#/components/schemas/token'
      required: true
    path_username:
      name: username
      description: Username del miembro
      in: path
      schema:
        $ref: '#/components/schemas/username'
      required: true
    path_groupname:
      name: nombreGrupo
      description: Nombre del grupo
      in: path
      schema:
        type: string
        example: bandidos
      required: true
  headers:
    Token:
      schema:
        $ref: '#/components/schemas/token'
  responses:
    response_token:
      description: Token identificador de la sesion de usuario
      headers:
        Token:
          schema:
            type: string
            title: Token identificador de la sesion de usuario
            example: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJkY29ycmVvMkBjb3JyZW8uY29tIiwiZXhwIjoxNzA0OTYwNjUzLCJ1c2VybmFtZ
    response_publicMember:
      description: .
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/publicMember'
    400:
      description: La solicitud esta incompleta o malformada
    404:
      description: El recurso buscado no se encuentra registrado
    406:
      description: La solicitud o su contenido no es aceptable y no puede ser procesada
    500:
      description: Error interno del servidor
paths:
  /miembro:
    summary: Catalogo de miembros
    description: Endpoint para realizar diversas operaciones respecto al catalogo de miembros del sistema
    get:
      summary: Obten los miembros registrados
      description: Devuelve todos los miembros registrados
      tags:
        - Miembro
      parameters:
        - $ref: '#/components/parameters/header_token'
      responses:
        200:
          description: Se ha retornado por lo menos un miembro registrado
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/publicMember'
                    - $ref: '#/components/schemas/publicMember'
                    - $ref: '#/components/schemas/publicMember'
        204:
          description: No hay ningun miembro registrado
        500:
          $ref: '#/components/responses/500'
    post:
      summary: Crea un nuevo miembro en el sistema
      description: Crea un nuevo miembro en el sistema con la informacion provista
      tags:
        - Miembro
      requestBody:
        description: Informacion necesaria para registrar un nuevo miembro
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newMember'
      responses:
        201:
          description: La solicitud fue exitosa y el nuevo miembro ha sido creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicMember'
          headers:
            Token:
              schema:
                $ref: '#/components/schemas/token'
        400:
          $ref: '#/components/responses/400'
        406:
          $ref: '#/components/responses/406'
        409:
          description: El username o correo ya han sido registrados
        500:
          $ref: '#/components/responses/500'
    delete:
      summary: Elimina un miembro registrado
      description: Elimina de forma permanente la informacion de miembro identificado por sus credenciales
      tags:
        - Miembro
      parameters:
        - $ref: '#/components/parameters/header_token'
      responses:
        200:
          description: La informacion del miembro ha sido eliminada.
        400:
          $ref: '#/components/responses/400'
        404:
          description: No se ha encontrado ningun miembro con esas credenciales
        406:
          description: El token provisto no coincide con las credenciales indicadas o ha expirado
        500:
          $ref: '#/components/responses/500'
  /miembro/login:
    summary: Inica sesion con un miembro registrado
    description: Obten un nuevo token con las credenciales de un miembro registrado
    post:
      summary: Inica sesion con un miembro registrado
      description: Obten un nuevo token con las credenciales de un miembro registrado
      tags:
        - Miembro
        - Sesion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginCredentials'
      responses:
        200:
          description: Credenciales correctas y sesion iniciada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicMember'
          headers:
            Token:
              schema:
                $ref: '#/components/schemas/token'
        400:
          $ref: '#/components/responses/400'
        404:
          description: Las credenciales no coinciden con ningun miembro registrado
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
  /miembro/{username}/username:
    summary: Cambia el username de un miembro
    description: Actualiza el username de un miembro identificado por su username actual
    put:
      summary: Cambia el username de un miembro
      description: Actualiza el username de un miembro identificado por su username actual
      tags:
        - Actualizar miembro
      parameters:
        - $ref: '#/components/parameters/header_token'
        - $ref: '#/components/parameters/path_username'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ username ]
              properties:
                username:
                  $ref: '#/components/schemas/username'
      responses:
        200:
          $ref: '#/components/responses/response_publicMember'
          description: Se ha actualizado el username del miembro
        400:
          $ref: '#/components/responses/400'
        404:
          description: Las credenciales no coinciden con ningun miembro registrado
        406:
          $ref: '#/components/responses/406'
        409:
          description: El nuevo username ya se encuentra en uso por otro miembro
        500:
          $ref: '#/components/responses/500'
  /miembro/{username}/email:
    summary: Cambia el email de un miembro
    description: Actualiza el email de un miembro identificado por su username
    put:
      summary: Cambia el email de un miembro
      description: Actualiza el email de un miembro identificado por su username
      tags:
        - Actualizar miembro
      parameters:
        - $ref: '#/components/parameters/path_username'
        - $ref: '#/components/parameters/header_token'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ email ]
              properties:
                email:
                  $ref: '#/components/schemas/email'
      responses:
        200:
          description: Se ha actualizado el email del miembro
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicMember'
        400:
          $ref: '#/components/responses/400'
        404:
          description: Las credenciales no coinciden con ningun miembro registrado
        406:
          $ref: '#/components/responses/406'
        409:
          description: El nuevo email ya se encuentra en uso por otro miembro
        500:
          $ref: '#/components/responses/500'
  /miembro/{username}/grupos:
    summary: Lista los grupos a los cuales un miembro pertenece
    description: Retorna una lista de los grupos de los cuales un miembro forma parte
    get:
      summary: Retorna los grupos de los cuales un miembro forma parte
      tags:
        - Grupo
      parameters:
        - $ref: '#/components/parameters/header_token'
        - $ref: '#/components/parameters/path_username'
      responses:
        200:
          description: Lista de grupos de los cuales el miembro forma parte
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/array_grupo'
        204:
          description: El miembro no forma parte de ningun grupo
        400:
          $ref: '#/components/responses/400'
        404:
          description: El miembro no se encuentra registrado en el sistema
        406:
          description: El token provisto no concuerda con el username provisto
        500:
          $ref: '#/components/responses/500'
  /grupo/{nombreGrupo}/{username}:
    delete:
      summary: Elimina al miembro del grupo
      description: Elimina al miembro identificado por su username del grupo indicado
      tags:
        - Grupo
      parameters:
        - $ref: '#/components/parameters/header_token'
        - $ref: '#/components/parameters/path_username'
        - $ref: '#/components/parameters/path_groupname'
      responses:
        200:
          description: El miembro ha sido eliminado del grupo
        400:
          $ref: '#/components/responses/400'
        404:
          description: El miembro no formaba parte del grupo o no se encuentra registrado
        406:
          description: El token provisto es invalido o no coincide con el miembro a eliminar
        500:
          $ref: '#/components/responses/500'
  /grupo/{nombreGrupo}:
    post:
      summary: Endpoint para crear un nuevo grupo
      description: Crea un nuevo grupo y agrega al creador del grupo como primer miembro
      tags:
        - Grupo
      parameters:
        - $ref: '#/components/parameters/header_token'
        - $ref: '#/components/parameters/path_groupname'
      responses:
        201:
          description: Se ha creado el grupo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/grupo'
        400:
          $ref: '#/components/responses/400'
        404:
          description: El token proporcionado no coincide con ningun miembro registrado
        406:
          $ref: '#/components/responses/406'
        409:
          description: El nombre de grupo ya se encuentra en uso
        500:
          $ref: '#/components/responses/500'
